// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLiteInserts.Data;

#nullable disable

namespace SQLiteInserts.Migrations
{
    [DbContext(typeof(RandalBotDbContext))]
    [Migration("20240609202938_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4");

            modelBuilder.Entity("SQLiteInserts.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComplaintText")
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("FkComplaintTypeId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_ComplaintTypeId");

                    b.Property<int?>("FkUserLoginId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_UserLoginId");

                    b.HasKey("ComplaintId");

                    b.HasIndex("FkComplaintTypeId");

                    b.HasIndex("FkUserLoginId");

                    b.ToTable("Complaint", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.ComplaintType", b =>
                {
                    b.Property<int>("ComplaintTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComplaintTypeName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ComplaintTypeId");

                    b.ToTable("ComplaintType", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.DiscordServer", b =>
                {
                    b.Property<int>("DiscordServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiscordServerInternalId")
                        .HasColumnType("INT");

                    b.Property<string>("DiscordServerName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("DiscordServerId");

                    b.ToTable("DiscordServer", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.DiscordUser", b =>
                {
                    b.Property<int>("DiscordUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiscordUserInternalId")
                        .HasColumnType("int identity");

                    b.Property<string>("DiscordUserName")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("Points")
                        .HasColumnType("INT");

                    b.HasKey("DiscordUserId");

                    b.ToTable("DiscordUser", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.LogType", b =>
                {
                    b.Property<int>("LogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogTypeName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("LogTypeId");

                    b.ToTable("LogType", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserAccessToServer", b =>
                {
                    b.Property<int>("UserAccessToServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FkServerId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_ServerId");

                    b.Property<int?>("FkUserLoginId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_UserLoginId");

                    b.HasKey("UserAccessToServerId");

                    b.HasIndex("FkServerId");

                    b.HasIndex("FkUserLoginId");

                    b.ToTable("UserAccessToServer", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserIsInServer", b =>
                {
                    b.Property<int>("UserIsInServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FkDiscordUserId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_DiscordUserId");

                    b.Property<int?>("FkServerId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_ServerId");

                    b.HasKey("UserIsInServerId");

                    b.HasIndex("FkDiscordUserId");

                    b.HasIndex("FkServerId");

                    b.ToTable("UserIsInServer", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FkDiscordUserId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_DiscordUserId");

                    b.Property<int?>("FkLogTypeId")
                        .HasColumnType("INT")
                        .HasColumnName("fk_LogTypeId");

                    b.Property<string>("UserLogText")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserLogId");

                    b.HasIndex("FkDiscordUserId");

                    b.HasIndex("FkLogTypeId");

                    b.ToTable("UserLog", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserLogin", b =>
                {
                    b.Property<int>("UserLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserLoginName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserLoginPassword")
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserLoginId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("SQLiteInserts.Models.Complaint", b =>
                {
                    b.HasOne("SQLiteInserts.Models.ComplaintType", "FkComplaintType")
                        .WithMany("Complaints")
                        .HasForeignKey("FkComplaintTypeId");

                    b.HasOne("SQLiteInserts.Models.UserLogin", "FkUserLogin")
                        .WithMany("Complaints")
                        .HasForeignKey("FkUserLoginId");

                    b.Navigation("FkComplaintType");

                    b.Navigation("FkUserLogin");
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserAccessToServer", b =>
                {
                    b.HasOne("SQLiteInserts.Models.DiscordServer", "FkServer")
                        .WithMany("UserAccessToServers")
                        .HasForeignKey("FkServerId");

                    b.HasOne("SQLiteInserts.Models.UserLogin", "FkUserLogin")
                        .WithMany("UserAccessToServers")
                        .HasForeignKey("FkUserLoginId");

                    b.Navigation("FkServer");

                    b.Navigation("FkUserLogin");
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserIsInServer", b =>
                {
                    b.HasOne("SQLiteInserts.Models.DiscordUser", "FkDiscordUser")
                        .WithMany("UserIsInServers")
                        .HasForeignKey("FkDiscordUserId");

                    b.HasOne("SQLiteInserts.Models.DiscordServer", "FkServer")
                        .WithMany("UserIsInServers")
                        .HasForeignKey("FkServerId");

                    b.Navigation("FkDiscordUser");

                    b.Navigation("FkServer");
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserLog", b =>
                {
                    b.HasOne("SQLiteInserts.Models.DiscordUser", "FkDiscordUser")
                        .WithMany("UserLogs")
                        .HasForeignKey("FkDiscordUserId");

                    b.HasOne("SQLiteInserts.Models.LogType", "FkLogType")
                        .WithMany("UserLogs")
                        .HasForeignKey("FkLogTypeId");

                    b.Navigation("FkDiscordUser");

                    b.Navigation("FkLogType");
                });

            modelBuilder.Entity("SQLiteInserts.Models.ComplaintType", b =>
                {
                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("SQLiteInserts.Models.DiscordServer", b =>
                {
                    b.Navigation("UserAccessToServers");

                    b.Navigation("UserIsInServers");
                });

            modelBuilder.Entity("SQLiteInserts.Models.DiscordUser", b =>
                {
                    b.Navigation("UserIsInServers");

                    b.Navigation("UserLogs");
                });

            modelBuilder.Entity("SQLiteInserts.Models.LogType", b =>
                {
                    b.Navigation("UserLogs");
                });

            modelBuilder.Entity("SQLiteInserts.Models.UserLogin", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("UserAccessToServers");
                });
#pragma warning restore 612, 618
        }
    }
}
